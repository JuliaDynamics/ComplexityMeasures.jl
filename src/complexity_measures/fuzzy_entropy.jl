using Statistics
using Distances
using Neighborhood
using DelayEmbeddings

export fuzzy_entropy

function mean_normalize(x::Dataset{D, T}) where {D, T}
    Dataset([x·µ¢ .- mean(x·µ¢) for x·µ¢ in x])
end

"""
    similarity_degree(d·µ¢‚±º·µê, n, r)

Compute the similarity degree ``D_{ij}^m(n, r)`` between two vectors
`ùê±·µ¢ ‚àà ‚Ñõ·µê` and `ùê≤·µ¢ ‚àà ‚Ñõ·µê`, given radius `r`, "fuzzy power" `n`, and `d·µ¢‚±º·µê`, which is the
distance between `x·µ¢` and `y·µ¢` according to the Chebyshev metric.
"""
Œº(d·µ¢‚±º·µê, n, r) = exp(-(d·µ¢‚±º·µê^n) / r)

"""
    fuzzy_œï(X·µè::Dataset{k, T}, n, r) where {k, T} ‚Üí œï::Real

The fuzzy œï function, analogous to the œï function for the approximate entropy
measure. Input data `X·µè` are pre-embedded `k`-dimensional vectors.

We use this function to compare similarity degrees between embeddings differing
by 1 in dimensionality.
"""
function fuzzy_œï(X·µè::Dataset{k, T}, n, r) where {k, T}
    L = length(X·µè)
    # TODO: for few points, using `Distances.pairwise` is really quick, but the
    # applications of the Fuzzy is typically on time series with hundreds of thousands
    # of points. Then accessing the `LxL` distance matrix becomes a slowing factor.
    # How much slower? Not sure, need to test. In the meanwhile, we just naively
    # compute distances.
    dtype = Chebyshev()
    œï = 0.0
    @inbounds for i in 1:L
        x·µ¢ = X·µè[i]
        for j in 1:L
            if (i != j)
                d·µ¢‚±º = evaluate(dtype, x·µ¢, X·µè[j])
                œï += Œº(d·µ¢‚±º, n, r)
            end
        end
        œï /= L - 1 # subtract 1 due to self-exclusion
    end
    œï /= L

    return œï
end

"""
    fuzzy_entropy(x::AbstractVector{T}; œÑ::Int = 2, m::Int = 1,
        r::Real = Statistics.std(x) * 0.2, n::Real = 2)

Compute the fuzzy entropy of `x`, which is defined as

```math
\\phi(x, k, r, n) = \\sum_{i = 1}^{N-m}
```
"""
function fuzzy_entropy(x::AbstractVector{T}; œÑ::Int = 2, m::Int = 1,
        r::Real = Statistics.std(x) * 0.2, n::Real = 2) where T <: Real
    E‚Çò = mean_normalize(genembed(x, 0:œÑ:((m - 1) * œÑ)))
    E‚Çò‚Çä‚ÇÅ = mean_normalize(genembed(x, 0:œÑ:(m * œÑ)))
    fœï‚Çò = fuzzy_œï(E‚Çò, n, r)
    fœï‚Çò‚Çä‚ÇÅ = fuzzy_œï(E‚Çò‚Çä‚ÇÅ, n, r)

    return log(fœï‚Çò) - log(fœï‚Çò‚Çä‚ÇÅ)
end
